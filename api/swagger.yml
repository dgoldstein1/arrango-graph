openapi: 3.0.0
info:
  version: '0.0.1'
  title: 'Destributed Graph'
  description: 'A destributed directed graph service'

paths:
  /edges:
    post:
      summary: Add edges to graph. Creates neighbor nodes if they do not already exist.
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - neighbors
              properties:
                neighbors:
                  type: array
                  items:
                    type: string
      parameters:
        - in: query
          name: node
          schema:
            type: string
          required: true
          description: Node to add edges to
      responses:
        '200':
          description: A JSON array of neighbors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgesResponse'

        '404':
          description: node does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgesResponse'

        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Returns a list of neighboring nodes.
      parameters:
        - in: query
          name: node
          schema:
            type: string
          required: true
          description: Node to retrieve neighbors for
      responses:
        '200':
          description: A JSON array of neighbors
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



  /shortestPath:
    get:
      summary: Returns path between two nodes, if exists.

      parameters:
        - in: query
          name: start
          schema:
            type: string
          required: true
          description: Name of the starting node.
        - in: query
          name: end
          schema:
            type: string
          required: true
          description: Name of the ending node.
      responses:
        '200':
          description: A JSON array of nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /metrics:
    get:
      summary: Prometheus Metrics.
      responses:
        '200':
          description: Prometheus metrics. For more information see [data model](https://prometheus.io/docs/concepts/data_model/).
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /export:
    get:
      summary: Exports graph as JSOn.
      responses:
        '200':
          description: TODO
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    EdgesResponse:
      type: object
      properties:
        succesfullyProcessed:
          description: neighbors nodes successfully added to the current node
          type: array
          items:
            type: string
    Error:
      type: object
      properties:
        code:
          type: integer
          description: The code of the error.
        error:
          type: string
          description: Explanation of the error.
