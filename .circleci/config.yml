
defaults: &defaults
  docker:
    - image: circleci/golang:1.12
  working_directory: /go/src/github.com/dgoldstein1/destrib-graph
  environment:
    GO111MODULE: "on"

version: 2
jobs:

  ###################
  ## Core Utilties ##
  ###################

  # build go binary and save it to workspace
  build:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: go build -o build/destrib-graph
      - run: build/destrib-graph --version
      - persist_to_workspace:
          root: .
          paths:
            - ./build/destrib-graph

  create-docs:
    docker:
      - image: circleci/python:2.7.15
    steps:
      - checkout
      # set permissions
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python2.7/site-packages
      - run: pip install PyYAML
      - run: python api/swagger-yaml-to-html.py < api/swagger.yml > api/index.html
      - persist_to_workspace:
          root: .
          paths:
            - ./api


  #############
  ## Testing ##
  #############

  # run unit tests
  unit-tests:
    machine : true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name : "build an updated image with source code and dependencies off base image"
          command : |
            docker build . -t dgoldstein1/destrib-graph:unit-tests -f .circleci/testing-dockerfile-run-tests
            docker images | grep dgoldstein1/destrib-graph:unit-tests
      - run:
          name : "run unit tests"
          command : |
            docker run -d \
             -p 8529:8529 \
             --env ARANGO_NO_AUTH=1 \
             arangodb:3.5

            docker run \
              --network="host" \
              dgoldstein1/destrib-graph:unit-tests




      - run:
          name : "Push results to code coverage (master only)"
          command : |
            ls | grep *.out
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter
              ./cc-test-reporter format-coverage ./coverage.out -t gocov
              ./cc-test-reporter upload-coverage
            fi


  # run full integration tests
  integration-tests:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name : "run integration tests"
          command : |
            echo "TODO"


  ############################
  ## Tasks for New Releases ##
  ############################

  push-docker-image:
    machine : true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name : "build and push docker images"
          command : |
              export $(cat VERSION | xargs)
              docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
              docker build . -t dgoldstein1/destrib-graph:$VERSION -t dgoldstein1/destrib-graph:latest
              docker push dgoldstein1/destrib-graph:$VERSION
              docker push dgoldstein1/destrib-graph:latest

  # publish github release with binary
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - checkout
      # get binaries
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            export $(cat VERSION | xargs)
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./build/destrib-graph


workflows:
  version: 2
  build-deploy:
    jobs:

      - build
      - unit-tests:
          requires:
            - build

      - integration-tests:
          requires:
            - build

      - create-docs

      - push-docker-image:
          requires:
            # - unit-tests
            - integration-tests
            - create-docs
          filters:
            branches:
              only: master

      - publish-github-release:
          requires:
            # - unit-tests
            - integration-tests
            - create-docs

          filters:
            branches:
              only: master
